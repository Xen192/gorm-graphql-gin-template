// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mygpt/model"
)

func newClerkUser(db *gorm.DB, opts ...gen.DOOption) clerkUser {
	_clerkUser := clerkUser{}

	_clerkUser.clerkUserDo.UseDB(db, opts...)
	_clerkUser.clerkUserDo.UseModel(&model.ClerkUser{})

	tableName := _clerkUser.clerkUserDo.TableName()
	_clerkUser.ALL = field.NewAsterisk(tableName)
	_clerkUser.ID = field.NewString(tableName, "id")
	_clerkUser.LinkedIdentity = field.NewString(tableName, "linked_identity")

	_clerkUser.fillFieldMap()

	return _clerkUser
}

type clerkUser struct {
	clerkUserDo clerkUserDo

	ALL            field.Asterisk
	ID             field.String
	LinkedIdentity field.String

	fieldMap map[string]field.Expr
}

func (c clerkUser) Table(newTableName string) *clerkUser {
	c.clerkUserDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c clerkUser) As(alias string) *clerkUser {
	c.clerkUserDo.DO = *(c.clerkUserDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *clerkUser) updateTableName(table string) *clerkUser {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.LinkedIdentity = field.NewString(table, "linked_identity")

	c.fillFieldMap()

	return c
}

func (c *clerkUser) WithContext(ctx context.Context) IClerkUserDo {
	return c.clerkUserDo.WithContext(ctx)
}

func (c clerkUser) TableName() string { return c.clerkUserDo.TableName() }

func (c clerkUser) Alias() string { return c.clerkUserDo.Alias() }

func (c clerkUser) Columns(cols ...field.Expr) gen.Columns { return c.clerkUserDo.Columns(cols...) }

func (c *clerkUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *clerkUser) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 2)
	c.fieldMap["id"] = c.ID
	c.fieldMap["linked_identity"] = c.LinkedIdentity
}

func (c clerkUser) clone(db *gorm.DB) clerkUser {
	c.clerkUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c clerkUser) replaceDB(db *gorm.DB) clerkUser {
	c.clerkUserDo.ReplaceDB(db)
	return c
}

type clerkUserDo struct{ gen.DO }

type IClerkUserDo interface {
	gen.SubQuery
	Debug() IClerkUserDo
	WithContext(ctx context.Context) IClerkUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IClerkUserDo
	WriteDB() IClerkUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IClerkUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IClerkUserDo
	Not(conds ...gen.Condition) IClerkUserDo
	Or(conds ...gen.Condition) IClerkUserDo
	Select(conds ...field.Expr) IClerkUserDo
	Where(conds ...gen.Condition) IClerkUserDo
	Order(conds ...field.Expr) IClerkUserDo
	Distinct(cols ...field.Expr) IClerkUserDo
	Omit(cols ...field.Expr) IClerkUserDo
	Join(table schema.Tabler, on ...field.Expr) IClerkUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IClerkUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IClerkUserDo
	Group(cols ...field.Expr) IClerkUserDo
	Having(conds ...gen.Condition) IClerkUserDo
	Limit(limit int) IClerkUserDo
	Offset(offset int) IClerkUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IClerkUserDo
	Unscoped() IClerkUserDo
	Create(values ...*model.ClerkUser) error
	CreateInBatches(values []*model.ClerkUser, batchSize int) error
	Save(values ...*model.ClerkUser) error
	First() (*model.ClerkUser, error)
	Take() (*model.ClerkUser, error)
	Last() (*model.ClerkUser, error)
	Find() ([]*model.ClerkUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ClerkUser, err error)
	FindInBatches(result *[]*model.ClerkUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ClerkUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IClerkUserDo
	Assign(attrs ...field.AssignExpr) IClerkUserDo
	Joins(fields ...field.RelationField) IClerkUserDo
	Preload(fields ...field.RelationField) IClerkUserDo
	FirstOrInit() (*model.ClerkUser, error)
	FirstOrCreate() (*model.ClerkUser, error)
	FindByPage(offset int, limit int) (result []*model.ClerkUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IClerkUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c clerkUserDo) Debug() IClerkUserDo {
	return c.withDO(c.DO.Debug())
}

func (c clerkUserDo) WithContext(ctx context.Context) IClerkUserDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c clerkUserDo) ReadDB() IClerkUserDo {
	return c.Clauses(dbresolver.Read)
}

func (c clerkUserDo) WriteDB() IClerkUserDo {
	return c.Clauses(dbresolver.Write)
}

func (c clerkUserDo) Session(config *gorm.Session) IClerkUserDo {
	return c.withDO(c.DO.Session(config))
}

func (c clerkUserDo) Clauses(conds ...clause.Expression) IClerkUserDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c clerkUserDo) Returning(value interface{}, columns ...string) IClerkUserDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c clerkUserDo) Not(conds ...gen.Condition) IClerkUserDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c clerkUserDo) Or(conds ...gen.Condition) IClerkUserDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c clerkUserDo) Select(conds ...field.Expr) IClerkUserDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c clerkUserDo) Where(conds ...gen.Condition) IClerkUserDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c clerkUserDo) Order(conds ...field.Expr) IClerkUserDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c clerkUserDo) Distinct(cols ...field.Expr) IClerkUserDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c clerkUserDo) Omit(cols ...field.Expr) IClerkUserDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c clerkUserDo) Join(table schema.Tabler, on ...field.Expr) IClerkUserDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c clerkUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IClerkUserDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c clerkUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IClerkUserDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c clerkUserDo) Group(cols ...field.Expr) IClerkUserDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c clerkUserDo) Having(conds ...gen.Condition) IClerkUserDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c clerkUserDo) Limit(limit int) IClerkUserDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c clerkUserDo) Offset(offset int) IClerkUserDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c clerkUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IClerkUserDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c clerkUserDo) Unscoped() IClerkUserDo {
	return c.withDO(c.DO.Unscoped())
}

func (c clerkUserDo) Create(values ...*model.ClerkUser) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c clerkUserDo) CreateInBatches(values []*model.ClerkUser, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c clerkUserDo) Save(values ...*model.ClerkUser) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c clerkUserDo) First() (*model.ClerkUser, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClerkUser), nil
	}
}

func (c clerkUserDo) Take() (*model.ClerkUser, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClerkUser), nil
	}
}

func (c clerkUserDo) Last() (*model.ClerkUser, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClerkUser), nil
	}
}

func (c clerkUserDo) Find() ([]*model.ClerkUser, error) {
	result, err := c.DO.Find()
	return result.([]*model.ClerkUser), err
}

func (c clerkUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ClerkUser, err error) {
	buf := make([]*model.ClerkUser, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c clerkUserDo) FindInBatches(result *[]*model.ClerkUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c clerkUserDo) Attrs(attrs ...field.AssignExpr) IClerkUserDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c clerkUserDo) Assign(attrs ...field.AssignExpr) IClerkUserDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c clerkUserDo) Joins(fields ...field.RelationField) IClerkUserDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c clerkUserDo) Preload(fields ...field.RelationField) IClerkUserDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c clerkUserDo) FirstOrInit() (*model.ClerkUser, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClerkUser), nil
	}
}

func (c clerkUserDo) FirstOrCreate() (*model.ClerkUser, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClerkUser), nil
	}
}

func (c clerkUserDo) FindByPage(offset int, limit int) (result []*model.ClerkUser, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c clerkUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c clerkUserDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c clerkUserDo) Delete(models ...*model.ClerkUser) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *clerkUserDo) withDO(do gen.Dao) *clerkUserDo {
	c.DO = *do.(*gen.DO)
	return c
}
